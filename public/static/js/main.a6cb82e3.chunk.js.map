{"version":3,"sources":["components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","logo.png","App.js","reportWebVitals.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","log","launches","map","index","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6cb82e3.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames'\nimport Moment from 'react-moment'\nimport {Link} from 'react-router-dom'\n\nconst LaunchItem = ({launch: {flight_number, mission_name, launch_date_local, launch_success}}) => {\n\n    return (\n        <div className=\"card card-body mb-3\">\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>Mission: <span className={classNames({\n                        'text-success': launch_success,\n                        'text-danger': !launch_success\n                    })}>{mission_name}</span></h4>\n                    <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default LaunchItem;","import React from 'react';\n\nconst MissionKey = () => {\n    return (\n        <div className=\"my-3\">\n            <p>\n                <span className=\"px-3 mr-2 bg-success\"/> = Success\n            </p>\n            <p>\n                <span className=\"px-3 mr-2 bg-danger\"/> = Fail\n            </p>\n        </div>\n    );\n};\n\nexport default MissionKey;","import React, {Component, Fragment} from 'react';\nimport LaunchItem from \"./LaunchItem\";\nimport MissionKey from \"./MissionKey\";\n\n// graphQL\nimport gql from 'graphql-tag'\nimport {Query} from 'react-apollo'\n\nconst LAUNCHES_QUERY = gql`\n    query LaunchesQuery {\n        launches {\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n`\n\nclass Launches extends Component {\n    render() {\n        return (\n            <Fragment>\n                <h1 className=\"display-4 my-3\">Launches</h1>\n                <MissionKey/>\n                <Query query={LAUNCHES_QUERY}>\n                    {({loading, error, data}) => {\n                        if (loading) return <h4>Loading...</h4>\n                        if (error) console.log(error)\n\n                        return <Fragment>\n                            {data.launches.map((launch, index) => (\n                                <LaunchItem key={index} launch={launch}/>\n                            ))}\n                        </Fragment>\n                    }}\n                </Query>\n            </Fragment>\n        );\n    }\n}\n\nexport default Launches;","import React, {Component, Fragment} from 'react';\nimport {Link} from 'react-router-dom'\nimport classNames from 'classnames'\n\n// graphQL\nimport gql from 'graphql-tag'\nimport {Query} from 'react-apollo'\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nclass Launch extends Component {\n    render() {\n        let {flight_number} = this.props.match.params\n        flight_number = parseInt(flight_number)\n        return (\n            <Fragment>\n                <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n                    {\n                        ({loading, error, data}) => {\n                            if (loading) return <h4>Loading...</h4>\n                            if (error) console.log(error)\n\n                            const {\n                                mission_name,\n                                flight_number,\n                                launch_year,\n                                launch_success,\n                                rocket: {rocket_id, rocket_name, rocket_type}\n                            } = data.launch\n\n                            return <div>\n                                <h1 className=\"display-4 my-3\">\n                                    <span className=\"text-dark\">Mission:</span>{mission_name}\n                                </h1>\n                                <h4 className=\"mb-3\">Launch Details</h4>\n                                <ul className=\"list-group\">\n                                    <li className=\"list-group-item\">\n                                        Flight Number: {flight_number}\n                                    </li>\n                                    <li className=\"list-group-item\">\n                                        Launch Year: {launch_year}\n                                    </li>\n                                    <li className=\"list-group-item\">\n                                        Launch Successful: <span className={classNames({\n                                        'text-success': launch_success,\n                                        'text-danger': !launch_success\n                                    })}>{launch_success ? 'Yes' : 'No'}</span>\n\n                                    </li>\n                                </ul>\n                                <h4 className=\"my-3\">Rocket Details</h4>\n                                <ul className=\"list-group\">\n                                    <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                                    <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                                    <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n                                </ul>\n                                <hr/>\n                                <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n                            </div>\n                        }\n                    }\n                </Query>\n            </Fragment>\n        );\n    }\n}\n\nexport default Launch;","export default __webpack_public_path__ + \"static/media/logo.91169fa6.png\";","import React, {Component} from 'react'\nimport Launches from \"./components/Launches\";\nimport Launch from \"./components/Launch\";\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\n\n// Apollo\nimport ApolloClient from 'apollo-boost'\nimport {ApolloProvider} from 'react-apollo'\nimport logo from './logo.png'\n\nconst client = new ApolloClient({\n    uri: '/graphql'\n})\n\nclass App extends Component {\n    render() {\n        return (\n            <ApolloProvider client={client}>\n                <Router>\n                    <div className=\"container\">\n                        <img\n                            src={logo}\n                            alt=\"SpaceX\"\n                            style={{width: 300, display: 'block', margin: 'auto'}}/>\n                        <Route exact path=\"/\" component={Launches}/>\n                        <Route exact path=\"/launch/:flight_number\" component={Launch}/>\n                    </div>\n                </Router>\n            </ApolloProvider>\n\n        );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}